{"dependencies": [{"name": "affine", "version": "2.4.0", "vulns": []}, {"name": "aioboto3", "version": "15.0.0", "vulns": []}, {"name": "aiobotocore", "version": "2.23.0", "vulns": []}, {"name": "aiofiles", "version": "24.1.0", "vulns": []}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.15", "vulns": []}, {"name": "aioitertools", "version": "0.12.0", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "boto3", "version": "1.38.27", "vulns": []}, {"name": "botocore", "version": "1.38.27", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.3.1", "vulns": []}, {"name": "certifi", "version": "2025.4.26", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "click", "version": "8.2.1", "vulns": []}, {"name": "click-plugins", "version": "1.1.1", "vulns": []}, {"name": "cligj", "version": "0.7.2", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "contourpy", "version": "1.3.2", "vulns": []}, {"name": "cycler", "version": "0.12.1", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "deprecated", "version": "1.2.18", "vulns": []}, {"name": "dnspython", "version": "2.7.0", "vulns": []}, {"name": "email-validator", "version": "2.2.0", "vulns": []}, {"name": "fastapi", "version": "0.111.0", "vulns": []}, {"name": "fastapi-cli", "version": "0.0.7", "vulns": []}, {"name": "filelock", "version": "3.18.0", "vulns": []}, {"name": "fiona", "version": "1.10.1", "vulns": []}, {"name": "fonttools", "version": "4.58.2", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "imageio", "version": "2.37.0", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jmespath", "version": "1.0.1", "vulns": []}, {"name": "kiwisolver", "version": "1.4.8", "vulns": []}, {"name": "lazy-loader", "version": "0.4", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "limits", "version": "5.4.0", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "matplotlib", "version": "3.8.4", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "multidict", "version": "6.6.3", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "numpy", "version": "1.26.4", "vulns": []}, {"name": "orjson", "version": "3.10.18", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pandas", "version": "2.3.1", "vulns": []}, {"name": "pillow", "version": "11.2.1", "vulns": [{"id": "PYSEC-2025-61", "fix_versions": ["11.3.0"], "aliases": ["CVE-2025-48379", "GHSA-xg8h-j46f-w952"], "description": "Pillow is a Python imaging library. In versions 11.2.0 to before 11.3.0, there is a heap buffer overflow when writing a sufficiently large (>64k encoded with default settings) image in the DDS format due to writing into a buffer without checking for available space. This only affects users who save untrusted data as a compressed DDS image. This issue has been patched in version 11.3.0."}]}, {"name": "pip", "version": "25.1.1", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "pipdeptree", "version": "2.28.0", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "psutil", "version": "7.0.0", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pydantic", "version": "2.7.3", "vulns": []}, {"name": "pydantic-core", "version": "2.18.4", "vulns": []}, {"name": "pydantic-settings", "version": "2.3.3", "vulns": []}, {"name": "pygments", "version": "2.19.1", "vulns": []}, {"name": "pyjwt", "version": "2.10.1", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "pyproj", "version": "3.6.1", "vulns": []}, {"name": "pytest", "version": "8.4.0", "vulns": []}, {"name": "pytest-asyncio", "version": "1.0.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.1.0", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "rasterio", "version": "1.4.3", "vulns": []}, {"name": "redis", "version": "5.0.1", "vulns": []}, {"name": "requests", "version": "2.32.4", "vulns": []}, {"name": "rich", "version": "14.0.0", "vulns": []}, {"name": "rich-toolkit", "version": "0.14.7", "vulns": []}, {"name": "s3transfer", "version": "0.13.1", "vulns": []}, {"name": "scikit-image", "version": "0.24.0", "vulns": []}, {"name": "scipy", "version": "1.15.3", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shapely", "version": "2.0.4", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "slowapi", "version": "0.1.9", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "snuggs", "version": "1.4.7", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "starlette", "version": "0.37.2", "vulns": [{"id": "GHSA-f96h-pmfr-66vw", "fix_versions": ["0.40.0"], "aliases": ["CVE-2024-47874"], "description": "### Summary Starlette treats `multipart/form-data` parts without a `filename` as text form fields and buffers those in byte strings with no size limit. This allows an attacker to upload arbitrary large form fields and cause Starlette to both slow down significantly due to excessive memory allocations and copy operations, and also consume more and more memory until the server starts swapping and grinds to a halt, or the OS terminates the server process with an OOM error. Uploading multiple such requests in parallel may be enough to render a service practically unusable, even if reasonable request size limits are enforced by a reverse proxy in front of Starlette.  ### PoC  ```python from starlette.applications import Starlette from starlette.routing import Route  async def poc(request):     async with request.form():         pass  app = Starlette(routes=[     Route('/', poc, methods=[\"POST\"]), ]) ```  ```sh curl http://localhost:8000 -F 'big=</dev/urandom' ```  ### Impact This Denial of service (DoS) vulnerability affects all applications built with Starlette (or FastAPI) accepting form requests. "}, {"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "tifffile", "version": "2025.6.11", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "typing-extensions", "version": "4.14.0", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "ujson", "version": "5.10.0", "vulns": []}, {"name": "urllib3", "version": "2.4.0", "vulns": [{"id": "GHSA-48p4-8xcf-vxj5", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50182"], "description": "urllib3 [supports](https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html) being used in a Pyodide runtime utilizing the [JavaScript Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or falling back on [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides [a mechanism](https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests) to control redirects.  However, the `retries` and `redirect` parameters are ignored with Pyodide; the runtime itself determines redirect behavior.   ## Affected usages  Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.   ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.   ## Remediation  If you use urllib3 in Node.js, upgrade to a patched version of urllib3.  Unfortunately, browsers provide no suitable way which urllib3 can use: `XMLHttpRequest` provides no control over redirects, the Fetch API returns `opaqueredirect` responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects."}, {"id": "GHSA-pq67-6m6q-mj2v", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50181"], "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level."}]}, {"name": "uvicorn", "version": "0.30.1", "vulns": []}, {"name": "watchfiles", "version": "1.0.5", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "wheel", "version": "0.45.1", "vulns": []}, {"name": "wrapt", "version": "1.17.2", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}], "fixes": []}
